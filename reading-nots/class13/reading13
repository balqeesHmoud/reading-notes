#### Linear Regression Overview
Linear regression is a method to model the relationship between a dependent variable and one or more independent variables using a linear equation.

#### Key Concepts
- **Simple Linear Regression**: Uses one independent variable.
- **Multiple Linear Regression**: Uses two or more independent variables.
- **Equation**: \( y = b_0 + b_1x_1 + b_2x_2 + \ldots + b_nx_n \)
  - \( y \): Dependent variable
  - \( b_0 \): Y-intercept
  - \( b_1, b_2, \ldots, b_n \): Coefficients
  - \( x_1, x_2, \ldots, x_n \): Independent variables

#### Assumptions
- **Linearity**: Relationship between variables is linear.
- **Independence**: Observations are independent.
- **Homoscedasticity**: Constant variance of errors.
- **Normality**: Errors are normally distributed.

#### Linear Regression in Python
1. **Import Libraries**:
   ```python
   import numpy as np
   import pandas as pd
   from sklearn.linear_model import LinearRegression
   from sklearn.model_selection import train_test_split
   from sklearn.metrics import mean_squared_error, r2_score
   ```

2. **Load Data**:
   ```python
   data = pd.read_csv('data.csv')
   X = data[['feature1', 'feature2']]
   y = data['target']
   ```

3. **Split Data**:
   ```python
   X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)
   ```

4. **Train Model**:
   ```python
   model = LinearRegression()
   model.fit(X_train, y_train)
   ```

5. **Make Predictions**:
   ```python
   y_pred = model.predict(X_test)
   ```

6. **Evaluate Model**:
   ```python
   print('Mean Squared Error:', mean_squared_error(y_test, y_pred))
   print('R^2 Score:', r2_score(y_test, y_pred))
   ```

#### Additional Resources
- **Online Tutorials**: Interactive coding exercises and videos.
- **Books and Articles**: In-depth explanations and applications.
- **Documentation**: Official `scikit-learn` documentation for advanced features.